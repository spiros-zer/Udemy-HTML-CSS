/**********************/
/* HEADER */
/**********************/

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: #fdf2e9;
  /*Instead of letting the content define the height, we want the navigation to be sticky later which means that when we scroll it will remain in the same place visible on the top of the page*/
  height: 9.6rem;
  padding: 0 4.8rem;
}

.logo {
  height: 2.2rem;
}

/**********************/
/* NAVIGATION */
/**********************/

.main-nav-list {
  display: flex;
  align-items: center;
  list-style: none;
  gap: 3.2rem;
}

.main-nav-link:link,
.main-nav-link:visited {
  display: inline-block;
  text-decoration: none;
  color: #333;
  font-weight: 500;
  font-size: 1.8rem;
  transition: all 0.3s;
}

.main-nav-link:hover,
.main-nav-link:active {
  color: #cf711f;
}

/*Due to the .main-nav-link that is already being applied to the element, the animation for the color transition and the display inline block is active. This, plus the and operator between classes makes it so that we don't need to specify again the animation or display for the .nav-cta class*/
.main-nav-link.nav-cta:link,
.main-nav-link.nav-cta:visited {
  padding: 1.2rem 2.4rem;
  border-radius: 9px;
  color: #fff;
  background-color: #e67e22;
}

.main-nav-link.nav-cta:hover,
.main-nav-link.nav-cta:active {
  background-color: #cf711f;
}

/**********************/
/* HERO SECTION */
/**********************/

.section-hero {
  background-color: #fdf2e9;
  padding: 4.8rem 0 9.6rem 0;
}

.hero {
  /*We dont use the reusable grid here because it is different in width size*/
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 9.6em;
  align-items: center;
  max-width: 130rem;
  margin: 0 auto;
  padding: 0 3.2rem;
}

.hero-description {
  font-size: 2rem;
  line-height: 1.6;
  margin-bottom: 4.8rem;
}

.hero-img {
  width: 100%
}

.delivered-meals {
  display: flex;
  align-items: center;
  gap: 1.6rem;
  margin-top: 8rem;
}

.delivered-imgs {
  display: flex;
}

.delivered-imgs img {
  height: 4.8rem;
  /*Bug in Safari browser when imgs are flex and width is not defined. That's why we explicitly define width here.*/
  width: 4.8rem;
  border-radius: 50%;
  /*In Flexbox you cannot specify a negative gap to make elements overlap and thus we have to use margin*/
  margin-right: -1.6rem;
  border: 3px solid #fdf2e9;
}

.delivered-imgs img:last-child {
  /*Because we used the negative margin-right the flexbox was shorter and thus even though there was a gap between elements we had to reset the margin of the last img for it to behave properly*/
  margin-right: 0;
}

.delivered-text {
  font-size: 1.8rem;
  font-weight: 600;
}

.delivered-text span {
  color: #cf711f;
  font-weight: 700;
}

/**********************/
/* HOT IT WORKS SECTION */
/**********************/

.section-how {
  padding: 9.6rem 0;
}

.step-number {
  font-size: 8.6rem;
  font-weight: 600;
  color: #ddd;
  margin-bottom: 1.2rem;
}

.step-description {
  font-size: 1.8rem;
  line-height: 1.8;
}

.step-img-box {
  display: flex;
  /*Jonas omitted to add this in his video, but without it the pseudo elements won't work correctly*/
  position: relative;
  align-items: center;
  justify-content: center;
}

/*before and after are not applied to images because in thml we are not allowed to add children to img elements*/

.step-img-box::before,
.step-img-box::after {
  display: block;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  content: "";
  border-radius: 50%;
}

.step-img-box::before {
  width: 60%;
  /*60% of parent's height, but due to this the height is 0. That's why we use the padding-bottom since due to the box-sizing padding counts towards width and height.*/
  /* height: 60%; */
  padding-bottom: 60%;
  background-color: #fdf2e9;
  z-index: -2;
}

.step-img-box::after {
  width: 45%;
  /*60% of parent's height, but due to this the height is 0. That's why we use the padding-bottom since due to the box-sizing padding counts towards width and height.*/
  /* height: 60%; */
  padding-bottom: 45%;
  background-color: #fae5d3;
  z-index: -1;
}

.step-img {
  width: 35%;
}

/*
max-width:
logic is that if the viewport is bigger than the max-width of the element then the element will have the width specified by max-width. But if the viewport widht is less than the max-width specified then the elemnt will have 100% of the width of the viewport => thus no scroll bars will be displayed.

rem:
it is the root element's font size. The root of the document is the html element and its default font size is 16px. So 1 rem = 16px IF THE HTML FONT SIZE REMAINS THE DEFAULT.
*/