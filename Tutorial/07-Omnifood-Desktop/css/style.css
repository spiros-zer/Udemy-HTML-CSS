/*

--- 01 TYPOGRAPHY SYSTEM

- Font Sizes (px):
10 / 12 / 14 / 16 / 18 / 20 / 24 / 30 / 36 / 44 / 52 / 62 / 74 / 86 / 98

- Font Weights

Default: 400
Medium: 500
Semi-bold: 600
Bold: 700

- Line Heights

Default: 1
Small: 1.05
Paragraph Default: 1.6

--- 02 COLORS

- Primary: #e67e22
- Tints: #fdf2e9
- Shades: #cf711f
- Accents:
- Greys: #555 #333

--- 05 SHADOWS

--- 06 BORDER-RADIUS

Default: 9px

--- 07 WHITESPACE

- Spacing System (px):
2 / 4 / 8 / 12 / 16 / 24 / 32 / 48 / 64 / 80 / 96 / 128

*/

* {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}

/*
Root element Font size:
Basically what we did here is we wanted to change the  the root element's font size to 10px in order to make the rem-to-pixel calculation easier. But if we set a hardcoded value like 10px then accessibility issues wiull occur (e.g. some user has increased browser font-size but our css will overwrite it). Thus, by using a percentage, the root element's font size will be a percentage of the size set by the user in their browser. The percentage is calculated as shown bellow.
*/
html {
  /*Percentage -> 10px / 16px = 0.625 = 62.5%*/
  /*Percentage of user's browser font-size setting*/

  font-size: 62.5%;
}

body {
  font-family: "Rubik", sans-serif;
  line-height: 1;
  font-weight: 400;
  color: #555;
}

/*******************************/
/* GENERAL REUSABLE COMPONENTS */
/*******************************/

.heading-primary {
  font-size: 5.2rem;
  font-weight: 700;
  line-height: 1.05;
  color: #333;
  /*Using px for very small distances*/
  letter-spacing: -0.5px;
  margin-bottom: 3.2rem;
}

.btn:link,
.btn:visited {
  display: inline-block;
  background-color: #e67e22;
  font-size: 2rem;
  font-weight: 600;
  padding: 1.6rem 3.2rem;
  text-decoration: none;
  border-radius: 9px;

  /*Animating color change of button from link to hevered*/
  transition: background-color 0.3s;
}

.btn--full:link,
.btn--full:visited {
  background-color: #e67e22;
  color: #fff;
}

.btn--full:hover,
.btn--full:active {
  background-color: #cf711f;
}

.btn--outline:link,
.btn--outline:visited {
  background-color: #fff;
  color: #555;
}

.btn--outline:hover,
.btn--outline:active {
  background-color: #fdf2e9;
  /*If we use border since the border is added on the outside of the button, the button seems to jump. That's why we dont't use the border/*/
  /* border: 3px solid #fff; */
  /*Trick to add boprder inside*/
  box-shadow: inset 0 0 0 3px #fff;
}

.margin-right-sm {
  margin-right: 1.6rem !important;
}

/**********************/
/* HEADER */
/**********************/

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: #fdf2e9;
  /*Instead of letting the content define the height, we want the navigation to be sticky later which means that when we scroll it will remain in the same place visible on the top of the page*/
  height: 9.6rem;
  padding: 0 4.8rem;
}

.logo {
  height: 2.2rem;
}

/**********************/
/* NAVIGATION */
/**********************/

.main-nav-list {
  display: flex;
  align-items: center;
  list-style: none;
  gap: 3.2rem;
}

.main-nav-link:link,
.main-nav-link:visited {
  display: inline-block;
  text-decoration: none;
  color: #333;
  font-weight: 500;
  font-size: 1.8rem;
  transition: all 0.3s;
}

.main-nav-link:hover,
.main-nav-link:active {
  color: #cf711f;
}

/*Due to the .main-nav-link that is already being applied to the element, the animation for the color transition and the display inline block is active. This, plus the and operator between classes makes it so that we don't need to specify again the animation or display for the .nav-cta class*/
.main-nav-link.nav-cta:link,
.main-nav-link.nav-cta:visited {
  padding: 1.2rem 2.4rem;
  border-radius: 9px;
  color: #fff;
  background-color: #e67e22;
}

.main-nav-link.nav-cta:hover,
.main-nav-link.nav-cta:active {
  background-color: #cf711f;
}

/**********************/
/* HERO SECTION */
/**********************/

.section-hero {
  background-color: #fdf2e9;
  padding: 4.8rem 0 9.6rem 0;
}

.hero {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 9.6em;
  align-items: center;
  max-width: 130rem;
  margin: 0 auto;
  padding: 0 3.2rem;
}

.hero-description {
  font-size: 2rem;
  line-height: 1.6;
  margin-bottom: 4.8rem;
}



.hero-img {
  width: 100%
}

.delivered-meals {
  display: flex;
  align-items: center;
  gap: 1.6rem;
  margin-top: 8rem;
}

.delivered-imgs {
  display: flex;
}

.delivered-imgs img {
  height: 4.8rem;
  /*Bug in Safari browser when imgs are flex and width is not defined. That's why we explicitly define width here.*/
  width: 4.8rem;
  border-radius: 50%;
  /*In Flexbox you cannot specify a negative gap to make elements overlap and thus we have to use margin*/
  margin-right: -1.6rem;
  border: 3px solid #fdf2e9;
}

.delivered-imgs img:last-child {
  /*Because we used the negative margin-right the flexbox was shorter and thus even though there was a gap between elements we had to reset the margin of the last img for it to behave properly*/
  margin-right: 0;
}

.delivered-text {
  font-size: 1.8rem;
  font-weight: 600;
}

.delivered-text span {
  color: #cf711f;
  font-weight: 700;
}

/*
max-width:
logic is that if the viewport is bigger than the max-width of the element then the element will have the width specified by max-width. But if the viewport widht is less than the max-width specified then the elemnt will have 100% of the width of the viewport => thus no scroll bars will be displayed.

rem:
it is the root element's font size. The root of the document is the html element and its default font size is 16px. So 1 rem = 16px IF THE HTML FONT SIZE REMAINS THE DEFAULT.
*/