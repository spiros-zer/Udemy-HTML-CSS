/**********************/
/* HEADER */
/**********************/

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: #fdf2e9;
  /*Instead of letting the content define the height, we want the navigation to be sticky later which means that when we scroll it will remain in the same place visible on the top of the page*/
  height: 9.6rem;
  padding: 0 4.8rem;
}

.logo {
  height: 2.2rem;
}

/**********************/
/* NAVIGATION */
/**********************/

.main-nav-list {
  display: flex;
  align-items: center;
  list-style: none;
  gap: 3.2rem;
}

.main-nav-link:link,
.main-nav-link:visited {
  display: inline-block;
  text-decoration: none;
  color: #333;
  font-weight: 500;
  font-size: 1.8rem;
  transition: all 0.3s;
}

.main-nav-link:hover,
.main-nav-link:active {
  color: #cf711f;
}

/*Due to the .main-nav-link that is already being applied to the element, the animation for the color transition and the display inline block is active. This, plus the and operator between classes makes it so that we don't need to specify again the animation or display for the .nav-cta class*/
.main-nav-link.nav-cta:link,
.main-nav-link.nav-cta:visited {
  padding: 1.2rem 2.4rem;
  border-radius: 9px;
  color: #fff;
  background-color: #e67e22;
}

.main-nav-link.nav-cta:hover,
.main-nav-link.nav-cta:active {
  background-color: #cf711f;
}

/**********************/
/* HERO SECTION */
/**********************/

.section-hero {
  background-color: #fdf2e9;
  padding: 4.8rem 0 9.6rem 0;
}

.hero {
  /*We dont use the reusable grid here because it is different in width size*/
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 9.6em;
  align-items: center;
  max-width: 130rem;
  margin: 0 auto;
  padding: 0 3.2rem;
}

.hero-description {
  font-size: 2rem;
  line-height: 1.6;
  margin-bottom: 4.8rem;
}

.hero-img {
  width: 100%
}

.delivered-meals {
  display: flex;
  align-items: center;
  gap: 1.6rem;
  margin-top: 8rem;
}

.delivered-imgs {
  display: flex;
}

.delivered-imgs img {
  height: 4.8rem;
  /*Bug in Safari browser when imgs are flex and width is not defined. That's why we explicitly define width here.*/
  width: 4.8rem;
  border-radius: 50%;
  /*In Flexbox you cannot specify a negative gap to make elements overlap and thus we have to use margin*/
  margin-right: -1.6rem;
  border: 3px solid #fdf2e9;
}

.delivered-imgs img:last-child {
  /*Because we used the negative margin-right the flexbox was shorter and thus even though there was a gap between elements we had to reset the margin of the last img for it to behave properly*/
  margin-right: 0;
}

.delivered-text {
  font-size: 1.8rem;
  font-weight: 600;
}

.delivered-text span {
  color: #cf711f;
  font-weight: 700;
}

/**********************/
/* FEATURED IN SECTION */
/**********************/

.section-featured {
  padding: 4.8rem 0 3.2rem 0;
}

.heading-featured-in {
  font-size: 1.4rem;
  text-transform: uppercase;
  letter-spacing: 0.75px;
  font-weight: 500;
  text-align: center;
  margin-bottom: 2.4rem;
  color: #888;
}

.logos {
  display: flex;
  justify-content: space-around;
}

.logos img {
  height: 3.2rem;
  filter: brightness(0);
  opacity: 50%;
}

/**********************/
/* HOT IT WORKS SECTION */
/**********************/

.section-how {
  padding: 9.6rem 0;
}

.step-number {
  font-size: 8.6rem;
  font-weight: 600;
  color: #ddd;
  margin-bottom: 1.2rem;
}

.step-description {
  font-size: 1.8rem;
  line-height: 1.8;
}

.step-img-box {
  display: flex;
  /*Jonas omitted to add this in his video, but without it the pseudo elements won't work correctly*/
  position: relative;
  align-items: center;
  justify-content: center;
}

/*before and after are not applied to images because in thml we are not allowed to add children to img elements*/

.step-img-box::before,
.step-img-box::after {
  display: block;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  content: "";
  border-radius: 50%;
}

.step-img-box::before {
  width: 60%;
  /*60% of parent's height, but due to this the height is 0. That's why we use the padding-bottom since due to the box-sizing padding counts towards width and height.*/
  /* height: 60%; */
  padding-bottom: 60%;
  background-color: #fdf2e9;
  z-index: -2;
}

.step-img-box::after {
  width: 45%;
  /*60% of parent's height, but due to this the height is 0. That's why we use the padding-bottom since due to the box-sizing padding counts towards width and height.*/
  /* height: 60%; */
  padding-bottom: 45%;
  background-color: #fae5d3;
  z-index: -1;
}

.step-img {
  width: 35%;
}

/**********************/
/* MEALS SECTION */
/**********************/

.section-meals {
  padding: 9.6rem 0;
}

.meal {
  box-shadow: 0 2.4rem 4.8rem rgba(0, 0, 0, 0.075);
  border-radius: 1.1rem;
  overflow: hidden;
  /*Animating card hovering effect when hovering cursor on it*/
  transition: all 0.4s;
}

.meal:hover {
  transform: translateY(-1.2rem);
  /*Shadow becomes larger and more diffused because element goes closer to light source*/
  box-shadow: 0 3.2rem 6.4rem rgba(0, 0, 0, 0.06);
}

.meal-content {
  padding: 3.2rem 4.8rem 4.8rem 4.8rem;
}

.meal-tags {
  display: flex;
  gap: 0.4rem;
  margin-bottom: 1.2rem;
}

.tag {
  display: inline-block;
  padding: 0.4rem 0.8rem;
  font-size: 1.2rem;
  text-transform: uppercase;
  color: #333;
  border-radius: 100px;
  font-weight: 600;
}

.tag--vegetarian {
  background-color: #51cf66;
}

.tag--vegan {
  background-color: #94d82d;
}

.tag--paleo {
  background-color: #ffd43b;
}

.meal-title {
  font-size: 2rem;
  columns: #333;
  font-weight: 600;
  margin-bottom: 3.2rem;
}

.meal-attributes {
  display: flex;
  flex-direction: column;
  gap: 2rem;
  list-style: none;
}

.meal-attribute {
  display: flex;
  align-items: center;
  gap: 1.6rem;
  font-size: 1.8rem;
}

.meal-icon {
  height: 2.4rem;
  width: 2.4rem;
  /*We uesed color instead of fill or stroke as we would go about it for svg elements because this here is from an external source and they treat it differently*/
  color: #e67e22;
}

.meal-img {
  width: 100%;
}

.all-recipes {
  text-align: center;
  font-size: 1.8rem;
}

/**********************/
/* MEALS SECTION */
/**********************/

.section-testimonials {
  display: grid;
  grid-template-columns: 55fr 45fr;
  align-items: center;
  background-color: #fdf2e9;
}

.testimonials-container {
  padding: 9.6rem;
}

.testimonials {
  /*We could have used the general grid and add another subclass but since we will be only using this subclass for the testimonials we might as well just create a class for it*/
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 4.8rem;
  row-gap: 4.8rem;
  column-gap: ;
}

.testimonial-img {
  /*We don't want it flexible we won't it a set width (doesn't have a reason, Jonas' design experience*/
  width: 6.4rem;
  border-radius: 50%;
  margin-bottom: 1.2rem;
}

.testimonial-text {
  font-size: 1.8rem;
  line-height: 1.8;
  margin-bottom: 1.6rem;
}

.testimonial-name {
  font-size: 1.6rem;
  color: #6f6f6f;
}

.gallery {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 1.6rem;
  padding: 1.6rem;
}

.gallery-item {
  overflow: hidden;
}

.gallery-item img {
  display: block;
  width: 100%;
  transition: all 0.4s;
}

.gallery-item img:hover {
  transform: scale(1.1);
}

/**********************/
/* MEALS SECTION */
/**********************/

.section-pricing {
  padding: 9.6rem 0;
}

.pricing-plan {
  border-radius: 1.1rem;
  width: 75%;
}

.pricing-plan--starter {
  justify-self: end;
  border: 2px solid #fdf2e9;
  padding: 4.6rem;
}

.pricing-plan--complete {
  position: relative;
  background-color: #fdf2e9;
  padding: 4.8rem;
  overflow: hidden;
}

.pricing-plan--complete::after {
  content: "Best value";
  position: absolute;
  top: 6%;
  right: -18%;
  text-transform: uppercase;
  font-size: 1.4rem;
  font-weight: 700;
  color: #333;
  background-color: #ffd43b;
  padding: 0.8rem 8rem;
  transform: rotate(45deg);
}

.plan-header {
  text-align: center;
  margin-bottom: 4.8rem;
}

.plan-name {
  color: #cf711f;
  font-weight: 600;
  font-size: 2rem;
  text-transform: uppercase;
  letter-spacing: 0.75;
  margin-bottom: 3.2rem;
}

.plan-price {
  font-size: 6.2rem;
  font-weight: 600;
  color: #333;
  margin-bottom: 1.6rem;
}

.plan-price span {
  font-size: 3rem;
  font-weight: 500;
  margin-right: 0.8rem;
}

.plan-text {
  font-size: 1.6rem;
  line-height: 1.6;
  color: #6f6f6f;
}

.plan-sign-up {
  text-align: center;
  margin-top: 4.8rem;
}

.plan-details {
  font-size: 1.6rem;
  line-height: 1.6;
  text-align: center;
}

.feature-icon {
  color: #e67e22;
  height: 3.2rem;
  width: 3.2rem;
  margin-bottom: 3.2rem;
  background-color: #fdf2e9;
  border-radius: 50%;
  padding: 1.6rem;
}

.feature-title {
  font-size: 2.4rem;
  color: #333;
  font-weight: 700;
  margin-bottom: 1.6rem;
}

.feature-text {
  font-size: 1.8rem;
  line-height: 1.8;
}

/*******************************/
/* CTA SECTION */
/*******************************/

.section-cta {
  padding: 9.6rem 0;
}

.cta {
  display: grid;
  grid-template-columns: 2fr 1fr;
  background-image: linear-gradient(to right bottom, #eb984e, #e67e22);
  box-shadow: 0 2.4rem 4.8rem rgba(0, 0, 0, 0.15);
  border-radius: 1.1rem;
  height: 50rem;
  overflow: hidden;
}

.cta-text-box {}

.cta-img-box {
  background-image: linear-gradient(to right bottom, rgba(235, 151, 78, 0.35), rgba(230, 125, 34, 0.35)), url("../img/eating.jpg");
  background-size: cover;
  background-position: center;
}

/*
max-width:
logic is that if the viewport is bigger than the max-width of the element then the element will have the width specified by max-width. But if the viewport widht is less than the max-width specified then the elemnt will have 100% of the width of the viewport => thus no scroll bars will be displayed.

rem:
it is the root element's font size. The root of the document is the html element and its default font size is 16px. So 1 rem = 16px IF THE HTML FONT SIZE REMAINS THE DEFAULT.
*/